Linux Kernel Development
How Fast it is Going, Who is Doing It, What They are Doing, and Who is Sponsoring It
Greg Kroah-Hartman, SuSE Labs / Novell Inc.
Based on a paper originally published at the 2006 Linux Symposium


The Linux kernel is one of the most popular Open Source development
projects, and yet not much attention has been placed on who is doing
this development, who is sponsoring this development, and what exactly
is being developed.  This paper should help explain some of these facts
by delving into the kernel changelogs and producing lots of statistics.

This paper will focus on the kernel releases of the past two and 1/2
years, from the 2.6.11 through the 2.6.24 release.


Development vs. Stability

In the past, the Linux kernel was split into two different trees, the
development branch, and the "stable" branch.  The development branch was
specified by using an odd number for the second release number, while the
stable branch used an even number.  As an example, the 2.5.32 release was a
development release, while the 2.4.24 release is a stable release.

After the 2.6 kernel series was created, the developers decided to change
this method of having two different trees.  They declared that all 2.6
kernel releases would be considered ``stable,'' no matter how quickly
development was happening.  These releases would happen every 2 to 3 months
and would allow developers to add new features and then stabilize them in
time for the next release.  This was done in order to allow distributions
to be able to decide on a release point easier by always having at least
one stable kernel release near a distribution release date.

To help with stability issues while the developers are creating a new
kernel version, a -stable branch was created that would contain bug fixes
and security updates for the past kernel release before the next major
release happened.

This is best explained with the diagram shown in Figure~\ref{gkh-release-cycle}.
The kernel team
released the 2.6.19 kernel as a stable release.  Then the developers
started working on new features and started releasing the \texttt{-rc} versions
as development kernels so that people could help test and debug the
changes.  After everyone agreed that the development release was stable
enough, it was released as the 2.6.20 kernel.

<insert release_cycle.png graphic here>

While the development of new features was happening, the 2.6.19.1,
2.6.19.2, and other stable kernel versions were released, containing bug
fixes and security updates.

For this paper, we are going to focus on the main kernel releases, and
ignore the -stable releases, as they contain a very small number of
bugfixes and are not where any development happens.


Frequency of release

When the kernel developers first decided on this new development cycle,
it was said that a new kernel would be released every 2-3 months, in
order to prevent lots of new development from being ``backed up.''
The actual number of days between releases can be seen in Table~\ref{gkh-days}.

Kernel		Days of
Version		development
2.6.11		 69
2.6.12		108
2.6.13		 73
2.6.14		 61
2.6.15		 68
2.6.16		 77
2.6.17		 91
2.6.18		 95
2.6.19		 72
2.6.20		 68
2.6.21		 81
2.6.22		 75
2.6.23		 94
2.6.24		108
 caption Frequency of kernel releases


It turns out that they were very correct, with the average being 2.7
months between releases.


Rate of Change

When modifying the Linux kernel, developers break their changes down
into small, individual units of change, called patches.  These patches
usually do only one thing to the source tree, and are built on top of
each other, modifying the source code by changing, adding, or removing
lines of code.  At each change point in time, the kernel should be able
to be successfully built and operate.  By enforcing this kind of
discipline, the kernel developers must break their changes down into
small logical pieces.  The number of individual changes that go into
each kernel release is very large, as can be seen in Table~\ref{gkh-changes}.

Kernel		Changes per
Version		Release
2.6.11		3,616
2.6.12		5,047
2.6.13		3,904
2.6.14		3,627
2.6.15		4,959
2.6.16		5,369
2.6.17		5,727
2.6.18		6,323
2.6.19		6,685
2.6.20		4,768
2.6.21		5,016
2.6.22		6,526
2.6.23		6,662
2.6.24		9,836

caption Changes per kernel release

When you compare the number of changes per release, with the length of
time for each release, you can determine the number of changes per hour, as can
be seen in Table~\ref{gkh-hour}.

Kernel		Changes
Version		per Hour
2.6.11		2.18
2.6.12		1.95
2.6.13		2.23
2.6.14		2.48
2.6.15		3.04
2.6.16		2.91
2.6.17		2.62
2.6.18		2.22
2.6.19		3.87
2.6.20		2.92
2.6.21		2.58
2.6.22		3.63
2.6.23		2.95
2.6.24		3.79

caption Changes per hour by kernel release

So, from the 2.6.11 to the 2.6.24 kernel release, a total of 1140 days,
there were 2.83 patches applied to the kernel tree per hour.  And that
is only the patches that were accepted.  This rate of change is
unprecedented in any type of software project, not to mention one that is
so large.


Kernel Source Size

The Linux kernel keeps growing in size over time, as more hardware is
supported, and new features added.  For the following numbers, I count
everything in the released Linux source tarball as ``source code'' even
though a small percentage is the scripts used to configure and build the
kernel, as well as a minor amount of documentation.  This is done
because someone creates those files, and are worthy of being mentioned.

The information in Table~\ref{gkh-lines} show the number of files and
lines in each kernel version.

Kernel Version	Files	Lines
2.6.11		17,090	6,624,076
2.6.12		17,360	6,777,860
2.6.13		18,090	6,988,800
2.6.14		18,434	7,143,233
2.6.15		18,811	7,290,070
2.6.16		19,251	7,480,062
2.6.17		19,553	7,588,014
2.6.18		20,208	7,752,846
2.6.19		20,936	7,976,221
2.6.20		21,280	8,102,533
2.6.21		21,614	8,246,517
2.6.22		22,411	8,499,410
2.6.23		22,530	8,566,606
2.6.24		23,062	8,859,683

caption Size per kernel release

Over these releases, the kernel team has a very constant growth rate of
about 10% per year, a very impressive number given the size of the code
tree.

But the kernel is not just growing.  With every change that is made to the
kernel source tree, lines are added, modified, and deleted in order to
accomplish the needed logic.  Looking at these numbers, broken down by
days, shows how quickly the kernel source tree is being worked on over
time.  This can be seen in Table~\ref{gkh-lines-per-hour}.

Kernel		Lines Added	Lines Deleted	Lines Modified
Version		per Day		per Day		per Day
2.6.11		2,987		1,123		1,292
2.6.12		2,327		  904		  950
2.6.13		3,972		1,082		1,712
2.6.14		4,037		1,493		1,729
2.6.15		4,215		2,055		2,256
2.6.16		3,665		1,191		1,663
2.6.17		2,758		1,594		1,334
2.6.18		3,159		1,426		1,099
2.6.19		5,463		2,352		1,866
2.6.20		3,035		1,177		1,018
2.6.21		2,935		1,158		  990
2.6.22		5,278		1,905		1,427
2.6.23		3,492		2,779		1,353
2.6.24		4,202		1,503		1,567

caption rate of change by kernel release


Summing up these numbers, it comes to a crazy 3,621 lines added, 1,550
lines removed, and 1,425 lines changed every day for the past 2 1/2 years.
That rate of change is larger than any other known software project of this
size.


Who is Doing the Work

The number of different developers who are doing Linux kernel
development, and the identifiable companies\footnote{The identification
of the different companies is described in the next section.} who are
sponsering this work, has been slowly increasing over the different
kernel versions, as can be seen in Table~\ref{gkh-num-developers}.

Kernel		Number of	Number of known
Version		Developers	Companies
2.6.11		483		 58
2.6.12		701		 73
2.6.13		637		 74
2.6.14		625		 80
2.6.15		679		 88
2.6.16		775		 92
2.6.17		784		100
2.6.18		897		109
2.6.19		878		114
2.6.20		728		117
2.6.21		834		125
2.6.22		957		169
2.6.23		991		170
2.6.24		1057		***

All		3712		206

caption Number of individual developers and employers


Despite this large number of individual developers, there is still a
small number who are doing the majority of the work.  Over the past two
and one half years, the top 10 individual developers have contributed
almost 15 percent of the number of changes and the top 30 developers have
contributed 30 percent.  The list of individual developers, the number
of changes they have contributed, and the percentage of the overall
total can be seen in Table~\ref{gkh-individuals}.

Name			Number of	Percent of Total
			Changes		Changes

Al Viro			1571		1.9%
David S. Miller		1520		1.8%
Adrian Bunk		1441		1.7%
Ralf Baechle		1346		1.6%
Andrew Morton		1222		1.5%
Andi Kleen		 993		1.2%
Takashi Iwai		 963		1.2%
Tejun Heo		 938		1.1%
Russell King		 926		1.1%
Stephen Hemminger	 920		1.1%

Thomas Gleixner		 754		0.9%
Patrick McHardy		 740		0.9%
Ingo Molnar		 735		0.9%
Trond Myklebust		 664		0.8%
Neil Brown		 646		0.8%
Randy Dunlap		 645		0.8%
Jean Delvare		 617		0.7%
Jeff Garzik		 615		0.7%
Christoph Hellwig	 615		0.7%
David Brownell		 588		0.7%

Paul Mundt		 581		0.7%
Alan Cox		 571		0.7%
Jeff Dike		 558		0.7%
Herbert Xu		 538		0.6%
David Woodhouse		 503		0.6%
Greg Kroah-Hartman	 496		0.6%
Linus Torvalds		 495		0.6%
Dmitry Torokhov		 494		0.6%
Alan Stern		 478		0.6%
Ben Dooks		 477		0.6%

caption Individual Kernel contributors


Who is Sponsoring the Work

Despite the broad use of the Linux kernel in a wide range of different
types of devices, and reliance of it by a number of different companies,
the number of individual companies that help sponsor the development of
the Linux kernel remains quite small as can be seen by the list of
different companies for each kernel version in Table~\ref{gkh-num-developers}.

The category "Unknown" are developers whom company it is not known who they
work for.  With a few exceptions, all of the people in this category have
contributed 10 or less changes to the kernel over the past 2 1/2 years, yet
the massive number of these developers causes it to be quite high.

The category "None" are developers who are known to be doing this work on
their own, with no financial contribution happening from any company.

The top 10 contributors, including the groups "unknown" and "none" make up
over 75% of the total contributions to the kernel.

The identification of the different companies was deduced through the
use of company email addresses and the known sponsoring of some
developers.  It is possible that a small number of different companies
were missed, however based on the analysis of the top contributors of
the kernel, the majority of the contributions are attributed in this
paper.

Company		Number of	Percent of
Name		Changes		Total

Unknown                  15770 (18.9%)
Red Hat                   9873 (11.8%)
None                      7881 (9.4%)
Novell                    7573 (9.1%)
IBM                       7065 (8.5%)
Linux Foundation          6634 (8.0%)
Intel                     3877 (4.6%)
Consultant                2139 (2.6%)
SGI                       1691 (2.0%)
Movial                    1453 (1.7%)

MIPS Technologies         1346 (1.6%)
MontaVista                 986 (1.2%)
NetApp                     972 (1.2%)
Freescale                  825 (1.0%)
linutronix                 815 (1.0%)
HP                         764 (0.9%)
Astaro                     741 (0.9%)
Nokia                      718 (0.9%)
Academia                   555 (0.7%)
Mandriva                   495 (0.6%)

Simtec                     477 (0.6%)
Cisco                      464 (0.6%)
Oracle                     457 (0.5%)
Linux Networx              436 (0.5%)
Fujitsu                    391 (0.5%)
Broadcom                   390 (0.5%)
SteelEye                   384 (0.5%)
SWsoft                     359 (0.4%)
QLogic                     345 (0.4%)
Mellanox                   294 (0.4%)



Conclusion

The Linux kernel is one of the largest and most successful open source
projects that has ever come about.  The huge rate of change and number
of individual contributors show that it has a vibrant and active
community, constantly causing the evolution of the kernel to survive the
number of different environments it is used in.  However, despite the
large number of individual contributors, the sponsorship of these
developers seem to be consolidated in a small number of individual
companies.  It will be interesting to see if, over time, the companies
that rely on the success of the Linux kernel will start to sponsor the
direct development of the project, to help ensure that it remains
valuable to those companies.


Thanks

The author would like to thank the thousands of individual kernel
contributors, without them, papers like this would not be interesting to
anyone.

I would also like to thank Jonathan Corbet, whose \texttt{gitdm} tool
were used to create a large number of these different statistics.
Without his help, this paper would have taken even longer to write, and
not been as informative.


Resources

The information for this paper was retrieved directly from the Linux
kernel releases as found at the \url{kernel.org} web site and from the
git kernel repository.  Some of the logs from the git repository were
cleaned up by hand due to email addresses changing over time, and minor
typos in authorship information.  A spreadsheet was used to compute a
number of the statistics.  All of the logs, scripts, and spreadsheet can
be found at
\url{http://www.kernel.org/pub/linux/kernel/people/gregkh/kernel_history/}


\end{document}

